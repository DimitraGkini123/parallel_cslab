import matplotlib.pyplot as plt

# Data for each locking technique
techniques = {
    "Coarse": {
    "100-0-0_1024": [1530.87, 1443.03, 1343.15, 1205.79, 533.96, 705.73, 563.39, 240.59],
    "80-10-10_1024": [2036.79, 1688.04, 965.41, 318.77, 302.24, 309.43, 239.10, 94.97],
    "20-40-40_1024": [1484.63, 1399.78, 735.42, 310.67, 199.93, 269.28, 161.49, 128.76],
    "0-50-50_1024": [1468.32, 1328.25, 728.62, 311.04, 283.75, 208.24, 219.20, 91.93],
    "100-0-0_8192": [151.04, 150.16, 143.29, 120.25, 111.79, 127.92, 127.08, 66.62],
    "80-10-10_8192": [75.16, 72.83, 69.30, 50.02, 37.19, 41.93, 31.18, 18.65],
    "20-40-40_8192": [85.86, 84.90, 74.90, 44.52, 33.14, 38.49, 28.21, 9.87],
    "0-50-50_8192": [91.18, 88.21, 77.91, 52.13, 33.01, 46.83, 31.79, 11.29]
    },
    "Fine-Grain": {
        "100-0-0_1024": [233.94, 306.98, 426.66, 512.53, 232.59, 117.22, 74.52, 2.73],
        "80-10-10_1024": [390.16, 241.06, 332.97, 491.61, 225.22, 239.54, 251.72, 5.76],
        "20-40-40_1024": [387.25, 241.16, 333.63, 496.85, 226.48, 247.87, 257.17, 5.40],
        "0-50-50_1024": [387.58, 241.52, 334.60, 495.64, 226.96, 242.27, 260.20, 9.92],
        "100-0-0_8192": [29.23, 50.64, 80.64, 161.94, 67.79, 31.94, 14.29, 0.29],
        "80-10-10_8192": [39.24, 38.09, 56.39, 85.84, 50.07, 54.35, 62.24, 0.30],
        "20-40-40_8192": [40.40, 35.28, 53.29, 82.16, 47.36, 59.53, 89.58, 0.30],
        "0-50-50_8192": [40.05, 35.15, 52.93, 81.11, 47.34, 58.95, 91.28, 0.33],
    },
    "Optimistic": {
        "100-0-0_1024": [643.44, 693.82, 775.93, 694.76, 205.70, 179.58, 326.47, 166.54],
        "80-10-10_1024": [901.34, 804.99, 640.82, 814.36, 509.26, 1765.44, 2517.69, 233.86],
        "20-40-40_1024": [881.90, 809.66, 660.78, 866.69, 538.48, 1777.85, 2464.77, 207.58],
        "0-50-50_1024": [878.83, 811.21, 663.96, 871.21, 544.20, 1680.88, 2398.26, 206.11],
        "100-0-0_8192": [71.64, 95.33, 131.46, 133.79, 77.11, 86.74, 126.54, 67.24],
        "80-10-10_8192": [33.36, 61.72, 113.38, 159.75, 231.09, 376.96, 412.24, 219.15],
        "20-40-40_8192": [30.50, 59.53, 111.39, 161.19, 235.91, 380.39, 439.94, 227.35],
        "0-50-50_8192": [29.84, 59.51, 110.34, 163.92, 237.21, 375.38, 412.82, 229.28],
    },
    "Lazy": {
        "100-0-0_1024": [1561.44, 3110.83, 5982.78, 11071.61, 22114.89, 44227.15, 74198.00, 83426.93],
        "80-10-10_1024": [1906.54, 1793.41, 1386.58, 1810.66, 1300.08, 5268.07, 8163.98, 1316.44],
        "20-40-40_1024": [1503.52, 1403.49, 1263.78, 1711.05, 1119.93, 3794.37, 5990.93, 316.74],
        "0-50-50_1024": [1404.53, 1318.61, 1230.77, 1676.78, 1069.71, 3371.46, 5460.94, 256.86],
        "100-0-0_8192": [151.94, 302.40, 581.91, 1075.31, 2146.58, 4288.43, 8192.53, 8178.20],
        "80-10-10_8192": [59.77, 115.47, 216.03, 318.22, 493.79, 843.35, 869.87, 584.97],
        "20-40-40_8192": [63.32, 123.21, 230.79, 341.35, 500.55, 809.94, 926.49, 540.40],
        "0-50-50_8192": [65.98, 126.59, 237.01, 348.84, 499.71, 783.80, 874.17, 509.00],
    },
    "Non-blocking": {
        "100-0-0_1024": [737.75, 1467.55, 2804.14, 5119.38, 4373.67, 2794.47, 19777.20, 29752.51],
        "80-10-10_1024": [1050.75, 1404.85, 1368.37, 1927.91, 1472.14, 6235.36, 9177.41, 7212.78],
        "20-40-40_1024": [998.02, 1281.72, 1284.70, 1794.72, 1264.25, 4846.43, 8420.48, 4880.87],
        "0-50-50_1024": [969.29, 1250.75, 1266.25, 1755.52, 1229.42, 4491.66, 7498.16, 4416.07],
        "100-0-0_8192": [80.86, 177.15, 355.66, 648.33, 1313.06, 2619.88, 4964.47, 5006.40],
        "80-10-10_8192": [63.82, 123.43, 231.06, 328.10, 499.21, 853.37, 910.44, 609.03],
        "20-40-40_8192": [61.20, 120.38, 228.10, 339.44, 520.77, 842.50, 1036.83, 617.93],
        "0-50-50_8192": [61.20, 119.61, 225.84, 336.36, 503.69, 835.42, 905.76, 594.56],
    },
}

# Serial Throughput for All Techniques
serial_throughput = {
    "100-0-0": 1572.93,
    "80-10-10": 2062.37,
    "20-40-40": 1611.64,
    "0-50-50": 1513.32,
}

threads = [1, 2, 4, 8, 16, 32, 64, 128]
operation_mixes = ["100-0-0", "80-10-10", "20-40-40", "0-50-50"]
list_sizes = [1024, 8192]  # Different list sizes

# Plot for each operation mix and list size
for list_size in list_sizes:
    for operation in operation_mixes:
        plt.figure(figsize=(10, 6))

        # Plot data for each technique
        for technique, data in techniques.items():
            key = f"{operation}_{list_size}"
            evenly_spaced_threads = range(len(threads) + 1)  # Evenly spaced points on the x-axis
            data_with_serial = [serial_throughput[operation]] + data[key]  # Add serial execution data
            plt.plot(
                evenly_spaced_threads,  # Evenly spaced x-axis
                data_with_serial,  # Corresponding throughput data
                marker="o",
                label=technique,
            )

        # Set titles, labels, and grid
        plt.title(f"Throughput vs. Threads ({operation}, List Size = {list_size})")
        plt.xlabel("Threads (including Serial)")
        plt.ylabel("Throughput (Kops/sec)")
        plt.xticks(evenly_spaced_threads, ["Serial"] + [str(t) for t in threads])  # Actual thread labels
        plt.legend()
        plt.grid()
        plt.tight_layout()
        plt.show()